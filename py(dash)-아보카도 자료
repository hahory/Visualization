# dash 라이브러리:대시보드 어플리케이션 초기화를 담당
import dash
# dash_core_components:동적 구성요소들(예: 그래프, 드롭다운 메뉴, 날짜 기간 등) 작성할 수 있도록 도와주는 기능을 제공
# 대화형 사용자 인터페이스를 만들기 위한 python 추상화를 제공. 그래프, 슬라이더 또는 드롭다운과 같은 interactive elements를 만드는데 사용
import dash_core_components as dcc
# dash_html_components:html 태그에 접근하도록 함
# html components용 Wrappers를 제공. 이 라이브러리를 사용하여 문단, 제목 또는 목록과 같은 요소를 작성할 수 있음
import dash_html_components as html
# pandas:데이터 수집 및 가공을 제공할 수 있는 함수들을 지원
import pandas as pd

# step 1. Data import
# avocado.csv 데이터를 수집
data = pd.read_csv('avocado.csv', index_col=0)
# type = conventional 과, region = Albany 에만 해당하는 행을 추출
data = data.query("type=='conventional' and region=='Albany'")
# 날짜의 오름차순으로 정렬
data['Date'] = pd.to_datetime(data['Date'], format='%Y-%m-%d')
data.sort_values('Date', inplace=True)

# step 2. Dash Class
# Dash 클래스를 정의하여 app이라는 객체를 별도 생성
app = dash.Dash(__name__)

# step 3. HTML layout 정의
app.layout = html.Div(
    # header Message
    # Header Message : html.div 는 일종의 parent component라고 볼 수 있다. 그리고, html.h1은 h1 태그를 말하며, html.p은 p 태그를 의미
    children=[
        html.H1(children='Temp Analytics',),
        html.P(
            chidren='Temp',
        ),
        # 그래프
        # dcc.Graph(dcc: Dash Core Component)는 Graphics library인 plotly 객체인 figure를 전달하여 웹 페이지에서 그래프를 렌더링 할 수 있음
        dcc.Graph(
            figure={
                'data': [
                    {
                        'x': data['Date'],
                        'y':data['AveragePrice'],
                        'type':'lines',
                    },
                ],
                'layout':{'title': 'Title_1'},
            },
        ),
        dcc.Graph(
            figure={
                'data': [
                    {
                        'x': data['Date'],
                        'y':data['Total Volume'],
                        'type':'lines',
                    },
                ],
                'layout':{'title': 'Title_2'},
            },
        ),
    ]
)
# Flask 기반의 서버로 작동을 함. 파라미터 debug=True로 하게되면, 수정입력을 해도, 서버를 restarting 하지 않고, 새로고침으로 변화를 확인
if __name__ == "__main__":
    app.run_server(debug=True)
